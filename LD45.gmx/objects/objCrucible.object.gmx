<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>objCrucicbleMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ready_to_brew = true
endAt = 0
do_flyin = false
start_elems_launched = false
colliding_elements = ds_list_create()
aerthhrthtr = 0
_new_dir = 0

do_bop_animation = false

scale_1 = 0
t_1 = 0
scale_2 = 0
t_2 = 0
scale_3 = 0
t_3 = 0


vertexCount = 3
angle = 0
radius = 70
vertex_x = ds_list_create()
vertex_y = ds_list_create()
rot_speed = 1
double_t = 0
prevClickT = 0

forceLock = false


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(colliding_elements)
ds_list_destroy(vertex_x)
ds_list_destroy(vertex_y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rt = lengthdir_x(radius * image_xscale, 0)


if !data.hovering_over &amp;&amp; point_in_circle(mouse_x, mouse_y, x, y, rt * 0.85) &amp;&amp; mouse_check_button_pressed(mb_left)
{
audio_play_sound(click2, 0, false)
do_bop_animation = true
scale_2 = 0
t_2 = 0
}


if point_in_circle(mouse_x, mouse_y, x, y, rt * 0.85) &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; !data.hovering_over
{
if (double_t - prevClickT) &lt; 15
{
    scrGetHintOnExistingElements()
}

prevClickT = double_t
}

data.hovering_over_updated = false
data.hovering_over = false
ds_list_clear(colliding_elements)

double_t += 1

aerthhrthtr +=1
if (forceLock)
{
    
angle += 20 *(sin(aerthhrthtr) + 1)
}
else
{

angle += 0.5*(sin(t_1) + 2)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objCrucible</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if forceLock exit

for (var i = 0; i &lt; ds_list_size(data.existing_elements); i++)
{
    with (data.existing_elements[| i]) {
         if instance_place(x, y, objCrucible) {
              ds_list_add(objCrucible.colliding_elements, id)
         }
    }
}

var num_elements = ds_list_size(colliding_elements)
if  num_elements == 0 &amp;&amp; !ready_to_brew
   ready_to_brew = true

   

if ready_to_brew &amp;&amp; ds_list_size(colliding_elements) &gt; 0
{
// special ending case
if ds_list_size(colliding_elements) == 1 &amp;&amp; !mouse_check_button(mb_left)
{
 eeeeeee = colliding_elements[| 0]
 if eeeeeee.type == 33
 {
    forceLock = true
    objInit.stage = 3
    exit
 }
}


    recipe = scrGetMatchingRecipe(colliding_elements)
    out_recipe = noone
    if recipe != -1 &amp;&amp;( scrCountElementsOfType(ds_grid_get(data.recipes, 0, recipe)) &lt; 4)
        {
        if recipe != 33 || (recipe == 33 &amp;&amp; scrCountElementsOfType(ds_grid_get(data.recipes, 0, recipe)) == 0)
           out_recipe = scrCreateRecipeOutput(recipe)
        }

    if out_recipe != noone
    {
        if !data.unlocked_recipes[| recipe  + data.starting_elements]
        {
            data.unlocked_recipes[| recipe  + data.starting_elements] = true
            vertexCount++
        }
    
        audio_play_sound(sound6, 0, false)
        var shoot_dir = random(360)
        var step = 360 / (num_elements + 1)
        _new_dir = shoot_dir
        for (var i = 0; i &lt; num_elements; i++)
        {
            with(colliding_elements[| i])
            {
                event_user(3)
                direction = other._new_dir
                speed = random_range(21,23)
                friction = 1.3
                lock_interaction = true
                alarm[0] = 30
            }
            _new_dir += step
        }
        
        with out_recipe
        {
            event_user(3)

            direction = other._new_dir
                speed = random_range(21,23)
            friction = 1.3
            lock_interaction = true
            event_user(7) // create scale
            alarm[0] = 30
        }
        
        do_bop_animation = true
        ready_to_brew = false
    }
   
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if do_flyin
{
vec = endAt - y
sp = sign(vec) *power((vec / 120), 2)
y += max(sp, 1.5)

if abs(y - endAt) &lt; 150 &amp;&amp; !start_elems_launched &amp;&amp; vec &gt; 0
{
    for (var i = 0; i &lt; data.starting_elements; i++)
    {
    elem = instance_create(x, y - 800, objElement)
    elem.type = i + 1
    elem.direction = 270 - (9.5 * data.starting_elements) / 2 + (i + 0.5) * 9.5
         with elem
        {
        disable_rubber = true
    speed = 20
    friction = 0.17
    lock_interaction = true
    alarm[0] = 60
    alarm[1] = 60
        }
    }

start_elems_launched = true
}

if abs(y - endAt) &lt; 2 &amp;&amp; do_flyin
{
y = endAt
do_flyin = false;

}
}

scale_1 = 0.05 * (1 + sin(t_1))

if (do_bop_animation)
{
   t_2 += 1 / room_speed * 3.5
   scale_2 = 0.25 * sin(pi * power(t_2, 0.5))
   
   if (t_2 &gt; 1)
   {
    t_2 = 0;
    do_bop_animation = false;
   }
}

extra_scale = 0.12 * ds_list_size(colliding_elements)

if ready_to_brew &amp;&amp; scale_3 + 0.05 &lt; extra_scale
{
scale_3 += 0.05
 scale_3 = min(scale_3, 1.2)
} else if ready_to_brew &amp;&amp; scale_3 &gt; extra_scale
{
scale_3 -= 0.05
 scale_3 = max(scale_3, 0)
}



t_1 += 1/room_speed


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// flyin anim at start
do_flyin = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 1 + scale_1 + scale_2 + scale_3
image_yscale = image_xscale

angle_step = 360 / (vertexCount)


for (var i = 0; i &lt; vertexCount; i++)
{
newX = x + lengthdir_x(radius* image_xscale, angle + i * angle_step)
newY = y + lengthdir_y(radius * image_yscale, angle + i * angle_step)

ds_list_add(vertex_x, newX)
ds_list_add(vertex_y, newY)
}

draw_set_color(c_white)
draw_polygon(vertex_x, vertex_y, 5)

ds_list_clear(vertex_y)
ds_list_clear(vertex_x)

//draw_sprite_ext(, 0, x, y, image_xscale, image_yscale,0,c_white, 1.0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
