<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>endAt = 0
do_flyin = false
start_elems_launched = false
colliding_elements_shred = ds_list_create()
show_debug_message("shredder: " + string(id))
blurp =false
scale_1 = 0
t_1 = 0
scale_2 = 0
t_2 = 0
scale_3 = 0
done_dest_scale = false
t_3 = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(colliding_elements_shred)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(colliding_elements_shred)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objCrucible</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; ds_list_size(data.existing_elements); i++)
{
    with (data.existing_elements[| i]) {
         if instance_place(x, y, objShredder) {
         show_debug_message("collided with shredder")
              ds_list_add(objShredder.colliding_elements_shred, id)
         }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if do_flyin
{
vec = endAt - y
y += sign(vec / 100) *power((vec / 100), 2)

if abs(y - endAt) &lt; 50
{
do_flyin = false;
}
}


if ds_list_size(colliding_elements_shred) &gt; 0 &amp;&amp; colliding_elements_shred[| 0].tracked &amp;&amp; !done_dest_scale
{
t_1 += 1 / room_speed*6
scale_1 = 0.2 * power(t_1, 2)

if (t_1 &gt; 1)
{
done_dest_scale = true
 t_1 = 0;
}
}
else if ds_list_size(colliding_elements_shred) &gt; 0 &amp;&amp; !colliding_elements_shred[| 0].tracked
{
with colliding_elements_shred[| 0] instance_destroy();
blurp = true
}
else if ds_list_size(colliding_elements_shred) == 0 &amp;&amp; scale_1 &gt; 0
{
t_1 += 1 / room_speed*6
scale_1 = -0.2 * power(t_1, 2)

if (t_1 &gt; 1)
{
 done_dest_scale = false;
 t_1 = 0;
}
}

if ds_list_size(colliding_elements_shred) == 0 &amp;&amp; scale_1 &lt;= 0
{
 t_1 = 0;
 scale_1 = 0
}

if blurp
{

t_1 += 1 / room_speed*6
scale_1 = -0.2 * power(t_1, 2)

if (t_1 &gt; 1)
{
 t_1 = 0;
 blurp = false;
 done_dest_scale = false;
}

}


if (blurp)
{
   t_2 += 1 / room_speed * 4
   scale_2 = 0.35 * sin(pi * power(t_2, 0.5))
   
   if (t_2 &gt; 1)
   {
    t_2 = 0;
    do_bop_animation = false;
   }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// flyin anim at start
do_flyin = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 1 + scale_1 + scale_2 +scale_3
image_yscale = image_xscale
draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale,0,c_white, 1.0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
